name: Dynamically Notify Code Owners

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: sudo apt-get install jq

      - name: Get changed files
        run: |
          DIFF_OUTPUT=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "Diff output: $DIFF_OUTPUT"
          CHANGED_FILES=$(echo "$DIFF_OUTPUT" | jq -R -s 'split("\n") | .[:-1]')
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Changed files: $CHANGED_FILES"
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"

      - name: Notify Code Owners
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_USER: ${{ github.event.pull_request.user.login }}
        run: |
          echo "Files: $CHANGED_FILES"
          CODEOWNERS_CONTENT=$(cat CODEOWNERS | jq -R -s 'split("\n") | .[:-1]')
          echo "Codeowners content: $CODEOWNERS_CONTENT"
          OWNERS=()
          for file in $(echo "$CHANGED_FILES" | jq -r '.[]'); do
            for line in $(echo "$CODEOWNERS_CONTENT" | jq -r '.[]'); do
              if [[ $file == ${line%% *}* ]]; then
                OWNER=${line##* }
                if [[ ! " ${OWNERS[@]} " =~ " ${OWNER} " ]]; then
                  OWNERS+=($OWNER)
                fi
              fi
            done
          done
          echo "Owners: ${OWNERS[@]}"
          if [ ${#OWNERS[@]} -ne 0 ]; then
            MESSAGE="Please review the changes: "
            for OWNER in "${OWNERS[@]}"; do
              MESSAGE+="@$OWNER "
            done
            echo "Message: $MESSAGE"
            response=$(curl -s -w "%{http_code}" -X POST -H 'Content-type: application/json' --data "{\"text\":\"New Pull Request: *${PR_TITLE}* opened by ${PR_USER}\n${PR_URL}\"}" $SLACK_WEBHOOK_URL)
            body=$(echo $response | sed -e 's/[0-9]*$//')
            status=$(echo $response | grep -o '[0-9]*$')
            echo "Response body: $body"
            echo "Response status: $status"
            if [ "$status" -ne 200 ]; then
              echo "Error sending message to Slack: $body"
              exit 1
            fi
          fi
